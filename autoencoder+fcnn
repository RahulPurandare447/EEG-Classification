autoencoder: import torch
import torch.nn as nn
import torch.optim as optim
import streamlit as st
import numpy as np
import tempfile
import os
import mne

# Autoencoder Model for EEG Classification
class Autoencoder(nn.Module):
    def _init_(self, input_size, encoding_dim=64):
        super(Autoencoder, self)._init_()
        
        # Encoder layers
        self.encoder = nn.Sequential(
            nn.Linear(input_size, 128),
            nn.ReLU(),
            nn.Linear(128, encoding_dim),
            nn.ReLU()
        )
        
        # Decoder layers (we can skip this for classification tasks)
        self.decoder = nn.Sequential(
            nn.Linear(encoding_dim, 128),
            nn.ReLU(),
            nn.Linear(128, input_size)
        )
        
    def forward(self, x):
        encoded = self.encoder(x)  # Get the encoded features
        decoded = self.decoder(encoded)  # Get the reconstructed input (optional for classification)
        return encoded, decoded  # Returning both encoded features and decoded input

# Classifier Model for EEG (Using Encoder as Feature Extractor)
class EEGClassifier(nn.Module):
    def _init_(self, encoder, hidden_dim=64, output_dim=1):
        super(EEGClassifier, self)._init_()
        self.encoder = encoder  # Use the pre-trained autoencoder's encoder
        self.fc1 = nn.Linear(64, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)
        self.sigmoid = nn.Sigmoid()  # For binary classification (Healthy vs Schizophrenia)

    def forward(self, x):
        encoded, _ = self.encoder(x)  # Get the encoded features
        x = torch.relu(self.fc1(encoded))  # Classifier
        x = self.fc2(x)
        x = self.sigmoid(x)  # Probability output
        return x

# Streamlit App Layout
st.title('Autoencoder for EEG Classification')

# Upload the trained autoencoder model
uploaded_model = st.file_uploader("Upload the trained Autoencoder model file (.pth)", type=["pth"])

if uploaded_model is not None:
    # Save the uploaded model to a temporary file
    temp_model_path = tempfile.mktemp() + '.pth'
    with open(temp_model_path, 'wb') as f:
        f.write(uploaded_model.getvalue())  # Save uploaded model file

    # Load the trained autoencoder model
    autoencoder = Autoencoder(input_size=10, encoding_dim=64)  # Adjust input_size based on your dataset
    autoencoder.load_state_dict(torch.load(temp_model_path))  # Load model weights
    autoencoder.eval()

    # Load the classifier that uses the encoder
    model = EEGClassifier(autoencoder, hidden_dim=64, output_dim=1)
    model.eval()

    st.write("Model loaded successfully!")

    # Function to preprocess the uploaded EEG file
    def preprocess_eeg(uploaded_file):
        # Save the uploaded file to a temporary location
        temp_dir = tempfile.mkdtemp()  # Create a temporary directory
        temp_file_path = os.path.join(temp_dir, "temp_eeg_file.edf")

        with open(temp_file_path, 'wb') as f:
            f.write(uploaded_file.getvalue())  # Write the uploaded file to disk

        # Now use the temporary file path to read the EEG data
        try:
            raw = mne.io.read_raw_edf(temp_file_path, preload=True)
        except Exception as e:
            st.write(f"Error reading the EDF file: {e}")
            return None

        raw.pick_types(eeg=True)
        raw.filter(l_freq=1.0, h_freq=40.0)  # Bandpass filter
        raw.resample(128)

        # Set EEG reference
        raw.set_eeg_reference('average', projection=True)
        raw.apply_proj()

        # Get the data as a NumPy array
        data = raw.get_data()

        # Assuming the input data is in the form (channels, samples) and needs to be reshaped for Autoencoder
        data = data.T  # Transpose to shape (samples, channels)

        # Add an extra dimension for the Autoencoder (samples, features)
        data = data.reshape((data.shape[0], 10))  # Example: flatten EEG data into 10 features

        # Convert to PyTorch tensor
        tensor_data = torch.tensor(data, dtype=torch.float32)
        return tensor_data

    # Upload EEG file for prediction
    uploaded_file = st.file_uploader("Upload an EEG file (.edf)", type=["edf"])

    if uploaded_file is not None:
        # Check if the file has .edf extension
        file_name = uploaded_file.name
        if file_name.lower().endswith(".edf"):
            # Preprocess the uploaded EEG data
            input_data = preprocess_eeg(uploaded_file)

            if input_data is not None:
                # Make prediction using the trained model
                with torch.no_grad():
                    output = model(input_data)
                    prediction = output.item()  # Convert tensor output to a Python float

                # Display the result
                if prediction > 0.5:
                    st.write(f"The model predicts: *Class 1 (Schizophrenia)* with a probability of {prediction:.2f}")
                else:
                    st.write(f"The model predicts: *Class 0 (Healthy)* with a probability of {prediction:.2f}")

                # Show input file name
                st.write(f"Uploaded file: {file_name}")
                # Optionally, show some details of the EEG data (e.g., number of channels, etc.)
                st.write(f"Number of channels: {input_data.shape[1]}")
                st.write(f"Number of samples: {input_data.shape[0]}")

        else:
            st.write("Please upload a valid .edf file.")
